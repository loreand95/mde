/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;
import taxi.Company;
import taxi.Customer;
import taxi.Geolocation;
import taxi.Rider;
import taxi.Route;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;
  
  protected void _format(final Company company, @Extension final IFormattableDocument document) {
    EList<Customer> _customers = company.getCustomers();
    for (final Customer customer : _customers) {
      document.<Customer>format(customer);
    }
    EList<Rider> _riders = company.getRiders();
    for (final Rider rider : _riders) {
      document.<Rider>format(rider);
    }
    EList<Route> _routes = company.getRoutes();
    for (final Route route : _routes) {
      document.<Route>format(route);
    }
  }
  
  protected void _format(final Rider rider, @Extension final IFormattableDocument document) {
    document.<Geolocation>format(rider.getLivePosition());
  }
  
  public void format(final Object rider, final IFormattableDocument document) {
    if (rider instanceof XtextResource) {
      _format((XtextResource)rider, document);
      return;
    } else if (rider instanceof Rider) {
      _format((Rider)rider, document);
      return;
    } else if (rider instanceof Company) {
      _format((Company)rider, document);
      return;
    } else if (rider instanceof EObject) {
      _format((EObject)rider, document);
      return;
    } else if (rider == null) {
      _format((Void)null, document);
      return;
    } else if (rider != null) {
      _format(rider, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(rider, document).toString());
    }
  }
}
