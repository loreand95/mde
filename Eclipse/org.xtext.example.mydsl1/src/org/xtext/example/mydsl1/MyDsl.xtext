// automatically generated by Xtext
grammar org.xtext.example.mydsl1.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.loreand.it/mde" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Customer returns Customer:
	'Customer'
	id=EString
	'{'
		'name' name=EString
		'surname' surname=EString
		'email' email=EString
		('subscriptionDate' subscriptionDate=EDate)?
		'expirationDate' expirationDate=EDate
		'status' status=CustomerStatus
		('routes' '(' routes+=[Route|EString] ( "," routes+=[Route|EString])* ')' )?
	'}';




EString returns ecore::EString:
	STRING | ID;

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;

enum CustomerStatus returns CustomerStatus:
				PENDING = 'PENDING' | ACTIVED = 'ACTIVED' | BANNED = 'BANNED';

Route returns Route:
	'Route'
	id=EString
	'{'
		'price' price=EDouble
		'date' date=EDate
		'startAddress' startAddress=EString
		'endAddress' endAddress=EString
		'feedback' feedback=EInt
		'status' status=RouteStatus
		'seats' seats=EInt
		'customer' customer=[Customer|EString]
		'rider' rider=[Rider|EString]
	'}';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EInt returns ecore::EInt:
	'-'? INT;

enum RouteStatus returns RouteStatus:
				DONE = 'DONE' | DOING = 'DOING' | PENDING = 'PENDING';

Rider returns Rider:
	'Rider'
	id=EString
	'{'
		'name' name=EString
		'surname' surname=EString
		'email' email=EString
		'status' status=RiderStatus
		('routes' '(' routes+=[Route|EString] ( "," routes+=[Route|EString])* ')' )?
		('location' location=Geolocation)?
	'}';

enum RiderStatus returns RiderStatus:
				AVAILABLE = 'AVAILABLE' | BUSY = 'BUSY' | UNAVAILABLE = 'UNAVAILABLE';

Geolocation returns Geolocation:
	'Geolocation'
	'{'
		'lat' lat=EDouble
		'lng' lng=EDouble
	'}';
