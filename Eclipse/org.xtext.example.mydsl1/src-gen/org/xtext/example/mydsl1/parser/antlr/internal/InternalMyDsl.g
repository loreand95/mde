/*
 * generated by Xtext 2.25.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl1.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl1.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl1.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Customer";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCustomer
entryRuleCustomer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCustomerRule()); }
	iv_ruleCustomer=ruleCustomer
	{ $current=$iv_ruleCustomer.current; }
	EOF;

// Rule Customer
ruleCustomer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Customer'
		{
			newLeafNode(otherlv_0, grammarAccess.getCustomerAccess().getCustomerKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCustomerAccess().getIdEStringParserRuleCall_1_0());
				}
				lv_id_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCustomerRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"org.xtext.example.mydsl1.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getCustomerAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='name'
		{
			newLeafNode(otherlv_3, grammarAccess.getCustomerAccess().getNameKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCustomerAccess().getNameEStringParserRuleCall_4_0());
				}
				lv_name_4_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCustomerRule());
					}
					set(
						$current,
						"name",
						lv_name_4_0,
						"org.xtext.example.mydsl1.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='surname'
		{
			newLeafNode(otherlv_5, grammarAccess.getCustomerAccess().getSurnameKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCustomerAccess().getSurnameEStringParserRuleCall_6_0());
				}
				lv_surname_6_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCustomerRule());
					}
					set(
						$current,
						"surname",
						lv_surname_6_0,
						"org.xtext.example.mydsl1.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='email'
		{
			newLeafNode(otherlv_7, grammarAccess.getCustomerAccess().getEmailKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCustomerAccess().getEmailEStringParserRuleCall_8_0());
				}
				lv_email_8_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCustomerRule());
					}
					set(
						$current,
						"email",
						lv_email_8_0,
						"org.xtext.example.mydsl1.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_9='subscriptionDate'
			{
				newLeafNode(otherlv_9, grammarAccess.getCustomerAccess().getSubscriptionDateKeyword_9_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCustomerAccess().getSubscriptionDateEDateParserRuleCall_9_1_0());
					}
					lv_subscriptionDate_10_0=ruleEDate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCustomerRule());
						}
						set(
							$current,
							"subscriptionDate",
							lv_subscriptionDate_10_0,
							"org.xtext.example.mydsl1.MyDsl.EDate");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_11='expirationDate'
		{
			newLeafNode(otherlv_11, grammarAccess.getCustomerAccess().getExpirationDateKeyword_10());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCustomerAccess().getExpirationDateEDateParserRuleCall_11_0());
				}
				lv_expirationDate_12_0=ruleEDate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCustomerRule());
					}
					set(
						$current,
						"expirationDate",
						lv_expirationDate_12_0,
						"org.xtext.example.mydsl1.MyDsl.EDate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_13='status'
		{
			newLeafNode(otherlv_13, grammarAccess.getCustomerAccess().getStatusKeyword_12());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCustomerAccess().getStatusCustomerStatusEnumRuleCall_13_0());
				}
				lv_status_14_0=ruleCustomerStatus
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCustomerRule());
					}
					set(
						$current,
						"status",
						lv_status_14_0,
						"org.xtext.example.mydsl1.MyDsl.CustomerStatus");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_15='routes'
			{
				newLeafNode(otherlv_15, grammarAccess.getCustomerAccess().getRoutesKeyword_14_0());
			}
			otherlv_16='('
			{
				newLeafNode(otherlv_16, grammarAccess.getCustomerAccess().getLeftParenthesisKeyword_14_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCustomerRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getCustomerAccess().getRoutesRouteCrossReference_14_2_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_18=','
				{
					newLeafNode(otherlv_18, grammarAccess.getCustomerAccess().getCommaKeyword_14_3_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCustomerRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getCustomerAccess().getRoutesRouteCrossReference_14_3_1_0());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_20=')'
			{
				newLeafNode(otherlv_20, grammarAccess.getCustomerAccess().getRightParenthesisKeyword_14_4());
			}
		)?
		otherlv_21='}'
		{
			newLeafNode(otherlv_21, grammarAccess.getCustomerAccess().getRightCurlyBracketKeyword_15());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEDate
entryRuleEDate returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEDateRule()); }
	iv_ruleEDate=ruleEDate
	{ $current=$iv_ruleEDate.current.getText(); }
	EOF;

// Rule EDate
ruleEDate returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='EDate'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getEDateAccess().getEDateKeyword());
	}
;

// Entry rule entryRuleEDouble
entryRuleEDouble returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEDoubleRule()); }
	iv_ruleEDouble=ruleEDouble
	{ $current=$iv_ruleEDouble.current.getText(); }
	EOF;

// Rule EDouble
ruleEDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_0());
			}
		)?
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_1());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEDoubleAccess().getFullStopKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_3());
		}
		(
			(
				kw='E'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getEKeyword_4_0_0());
				}
				    |
				kw='e'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getEKeyword_4_0_1());
				}
			)
			(
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_4_1());
				}
			)?
			this_INT_7=RULE_INT
			{
				$current.merge(this_INT_7);
			}
			{
				newLeafNode(this_INT_7, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_4_2());
			}
		)?
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleGeolocation
entryRuleGeolocation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGeolocationRule()); }
	iv_ruleGeolocation=ruleGeolocation
	{ $current=$iv_ruleGeolocation.current; }
	EOF;

// Rule Geolocation
ruleGeolocation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Geolocation'
		{
			newLeafNode(otherlv_0, grammarAccess.getGeolocationAccess().getGeolocationKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getGeolocationAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='lat'
		{
			newLeafNode(otherlv_2, grammarAccess.getGeolocationAccess().getLatKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGeolocationAccess().getLatEDoubleParserRuleCall_3_0());
				}
				lv_lat_3_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGeolocationRule());
					}
					set(
						$current,
						"lat",
						lv_lat_3_0,
						"org.xtext.example.mydsl1.MyDsl.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='lng'
		{
			newLeafNode(otherlv_4, grammarAccess.getGeolocationAccess().getLngKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGeolocationAccess().getLngEDoubleParserRuleCall_5_0());
				}
				lv_lng_5_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGeolocationRule());
					}
					set(
						$current,
						"lng",
						lv_lng_5_0,
						"org.xtext.example.mydsl1.MyDsl.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getGeolocationAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Rule CustomerStatus
ruleCustomerStatus returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='PENDING'
			{
				$current = grammarAccess.getCustomerStatusAccess().getPENDINGEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCustomerStatusAccess().getPENDINGEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='ACTIVED'
			{
				$current = grammarAccess.getCustomerStatusAccess().getACTIVEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCustomerStatusAccess().getACTIVEDEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='BANNED'
			{
				$current = grammarAccess.getCustomerStatusAccess().getBANNEDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCustomerStatusAccess().getBANNEDEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule RouteStatus
ruleRouteStatus returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='DONE'
			{
				$current = grammarAccess.getRouteStatusAccess().getDONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRouteStatusAccess().getDONEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='DOING'
			{
				$current = grammarAccess.getRouteStatusAccess().getDOINGEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRouteStatusAccess().getDOINGEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='PENDING'
			{
				$current = grammarAccess.getRouteStatusAccess().getPENDINGEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRouteStatusAccess().getPENDINGEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule RiderStatus
ruleRiderStatus returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='AVAILABLE'
			{
				$current = grammarAccess.getRiderStatusAccess().getAVAILABLEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRiderStatusAccess().getAVAILABLEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='BUSY'
			{
				$current = grammarAccess.getRiderStatusAccess().getBUSYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRiderStatusAccess().getBUSYEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='UNAVAILABLE'
			{
				$current = grammarAccess.getRiderStatusAccess().getUNAVAILABLEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRiderStatusAccess().getUNAVAILABLEEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
