/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl1.serializer;

import com.google.inject.Inject;
import it.disim.loreand.mde.Customer;
import it.disim.loreand.mde.Geolocation;
import it.disim.loreand.mde.MdePackage;
import it.disim.loreand.mde.Rider;
import it.disim.loreand.mde.Route;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl1.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MdePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MdePackage.CUSTOMER:
				sequence_Customer(context, (Customer) semanticObject); 
				return; 
			case MdePackage.GEOLOCATION:
				sequence_Geolocation(context, (Geolocation) semanticObject); 
				return; 
			case MdePackage.RIDER:
				sequence_Rider(context, (Rider) semanticObject); 
				return; 
			case MdePackage.ROUTE:
				sequence_Route(context, (Route) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Customer returns Customer
	 *
	 * Constraint:
	 *     (
	 *         id=EString 
	 *         name=EString 
	 *         surname=EString 
	 *         email=EString 
	 *         subscriptionDate=EDate? 
	 *         expirationDate=EDate 
	 *         status=CustomerStatus 
	 *         (routes+=[Route|EString] routes+=[Route|EString]*)?
	 *     )
	 */
	protected void sequence_Customer(ISerializationContext context, Customer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Geolocation returns Geolocation
	 *
	 * Constraint:
	 *     (lat=EDouble lng=EDouble)
	 */
	protected void sequence_Geolocation(ISerializationContext context, Geolocation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MdePackage.Literals.GEOLOCATION__LAT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdePackage.Literals.GEOLOCATION__LAT));
			if (transientValues.isValueTransient(semanticObject, MdePackage.Literals.GEOLOCATION__LNG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdePackage.Literals.GEOLOCATION__LNG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGeolocationAccess().getLatEDoubleParserRuleCall_3_0(), semanticObject.getLat());
		feeder.accept(grammarAccess.getGeolocationAccess().getLngEDoubleParserRuleCall_5_0(), semanticObject.getLng());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Rider returns Rider
	 *
	 * Constraint:
	 *     (
	 *         id=EString 
	 *         name=EString 
	 *         surname=EString 
	 *         email=EString 
	 *         status=RiderStatus 
	 *         (routes+=[Route|EString] routes+=[Route|EString]*)? 
	 *         location=Geolocation?
	 *     )
	 */
	protected void sequence_Rider(ISerializationContext context, Rider semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Route returns Route
	 *
	 * Constraint:
	 *     (
	 *         id=EString 
	 *         price=EDouble 
	 *         date=EDate 
	 *         startAddress=EString 
	 *         endAddress=EString 
	 *         feedback=EInt 
	 *         status=RouteStatus 
	 *         seats=EInt 
	 *         customer=[Customer|EString] 
	 *         rider=[Rider|EString]
	 *     )
	 */
	protected void sequence_Route(ISerializationContext context, Route semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MdePackage.Literals.IDENTIFIABLE__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdePackage.Literals.IDENTIFIABLE__ID));
			if (transientValues.isValueTransient(semanticObject, MdePackage.Literals.ROUTE__PRICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdePackage.Literals.ROUTE__PRICE));
			if (transientValues.isValueTransient(semanticObject, MdePackage.Literals.ROUTE__DATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdePackage.Literals.ROUTE__DATE));
			if (transientValues.isValueTransient(semanticObject, MdePackage.Literals.ROUTE__START_ADDRESS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdePackage.Literals.ROUTE__START_ADDRESS));
			if (transientValues.isValueTransient(semanticObject, MdePackage.Literals.ROUTE__END_ADDRESS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdePackage.Literals.ROUTE__END_ADDRESS));
			if (transientValues.isValueTransient(semanticObject, MdePackage.Literals.ROUTE__FEEDBACK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdePackage.Literals.ROUTE__FEEDBACK));
			if (transientValues.isValueTransient(semanticObject, MdePackage.Literals.ROUTE__STATUS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdePackage.Literals.ROUTE__STATUS));
			if (transientValues.isValueTransient(semanticObject, MdePackage.Literals.ROUTE__SEATS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdePackage.Literals.ROUTE__SEATS));
			if (transientValues.isValueTransient(semanticObject, MdePackage.Literals.ROUTE__CUSTOMER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdePackage.Literals.ROUTE__CUSTOMER));
			if (transientValues.isValueTransient(semanticObject, MdePackage.Literals.ROUTE__RIDER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MdePackage.Literals.ROUTE__RIDER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRouteAccess().getIdEStringParserRuleCall_1_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getRouteAccess().getPriceEDoubleParserRuleCall_4_0(), semanticObject.getPrice());
		feeder.accept(grammarAccess.getRouteAccess().getDateEDateParserRuleCall_6_0(), semanticObject.getDate());
		feeder.accept(grammarAccess.getRouteAccess().getStartAddressEStringParserRuleCall_8_0(), semanticObject.getStartAddress());
		feeder.accept(grammarAccess.getRouteAccess().getEndAddressEStringParserRuleCall_10_0(), semanticObject.getEndAddress());
		feeder.accept(grammarAccess.getRouteAccess().getFeedbackEIntParserRuleCall_12_0(), semanticObject.getFeedback());
		feeder.accept(grammarAccess.getRouteAccess().getStatusRouteStatusEnumRuleCall_14_0(), semanticObject.getStatus());
		feeder.accept(grammarAccess.getRouteAccess().getSeatsEIntParserRuleCall_16_0(), semanticObject.getSeats());
		feeder.accept(grammarAccess.getRouteAccess().getCustomerCustomerEStringParserRuleCall_18_0_1(), semanticObject.eGet(MdePackage.Literals.ROUTE__CUSTOMER, false));
		feeder.accept(grammarAccess.getRouteAccess().getRiderRiderEStringParserRuleCall_20_0_1(), semanticObject.eGet(MdePackage.Literals.ROUTE__RIDER, false));
		feeder.finish();
	}
	
	
}
