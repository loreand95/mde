/*
 * generated by Xtext 2.25.0
 */
package it.disim.mde.loreand.xtext.serializer;

import com.google.inject.Inject;
import it.disim.mde.loreand.uber.Car;
import it.disim.mde.loreand.uber.CardID;
import it.disim.mde.loreand.uber.Customer;
import it.disim.mde.loreand.uber.Geolocation;
import it.disim.mde.loreand.uber.Rider;
import it.disim.mde.loreand.uber.Route;
import it.disim.mde.loreand.uber.Supervisor;
import it.disim.mde.loreand.uber.Uber;
import it.disim.mde.loreand.uber.UberPackage;
import it.disim.mde.loreand.xtext.services.UberDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class UberDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private UberDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == UberPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UberPackage.CAR:
				sequence_Car(context, (Car) semanticObject); 
				return; 
			case UberPackage.CARD_ID:
				sequence_CardID(context, (CardID) semanticObject); 
				return; 
			case UberPackage.CUSTOMER:
				sequence_Customer(context, (Customer) semanticObject); 
				return; 
			case UberPackage.GEOLOCATION:
				sequence_Geolocation(context, (Geolocation) semanticObject); 
				return; 
			case UberPackage.RIDER:
				sequence_Rider(context, (Rider) semanticObject); 
				return; 
			case UberPackage.ROUTE:
				sequence_Route(context, (Route) semanticObject); 
				return; 
			case UberPackage.SUPERVISOR:
				sequence_Supervisor(context, (Supervisor) semanticObject); 
				return; 
			case UberPackage.UBER:
				sequence_Uber(context, (Uber) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Car returns Car
	 *
	 * Constraint:
	 *     (licencePlate=EString model=EString color=EString)
	 */
	protected void sequence_Car(ISerializationContext context, Car semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.CAR__LICENCE_PLATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.CAR__LICENCE_PLATE));
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.CAR__MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.CAR__MODEL));
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.CAR__COLOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.CAR__COLOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCarAccess().getLicencePlateEStringParserRuleCall_3_0(), semanticObject.getLicencePlate());
		feeder.accept(grammarAccess.getCarAccess().getModelEStringParserRuleCall_5_0(), semanticObject.getModel());
		feeder.accept(grammarAccess.getCarAccess().getColorEStringParserRuleCall_7_0(), semanticObject.getColor());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CardID returns CardID
	 *
	 * Constraint:
	 *     (id=EString path=EString releaseDate=EString institution=EString approved=[Supervisor|EString]?)
	 */
	protected void sequence_CardID(ISerializationContext context, CardID semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Customer returns Customer
	 *
	 * Constraint:
	 *     (
	 *         id=EString 
	 *         name=EString 
	 *         surname=EString 
	 *         email=EString 
	 *         subscriptionDate=EString? 
	 *         expirationDate=EString 
	 *         status=CustomerStatus 
	 *         (routes+=[Route|EString] routes+=[Route|EString]*)? 
	 *         cardID=CardID?
	 *     )
	 */
	protected void sequence_Customer(ISerializationContext context, Customer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Geolocation returns Geolocation
	 *
	 * Constraint:
	 *     (lat=EDouble lng=EDouble)
	 */
	protected void sequence_Geolocation(ISerializationContext context, Geolocation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.GEOLOCATION__LAT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.GEOLOCATION__LAT));
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.GEOLOCATION__LNG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.GEOLOCATION__LNG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGeolocationAccess().getLatEDoubleParserRuleCall_3_0(), semanticObject.getLat());
		feeder.accept(grammarAccess.getGeolocationAccess().getLngEDoubleParserRuleCall_5_0(), semanticObject.getLng());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Rider returns Rider
	 *
	 * Constraint:
	 *     (
	 *         id=EString 
	 *         name=EString 
	 *         surname=EString 
	 *         email=EString 
	 *         status=RiderStatus 
	 *         (routes+=[Route|EString] routes+=[Route|EString]*)? 
	 *         location=Geolocation 
	 *         car=Car
	 *     )
	 */
	protected void sequence_Rider(ISerializationContext context, Rider semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Route returns Route
	 *
	 * Constraint:
	 *     (
	 *         id=EString 
	 *         price=EDouble 
	 *         date=EString 
	 *         startAddress=EString 
	 *         endAddress=EString 
	 *         feedback=EInt 
	 *         status=RouteStatus 
	 *         seats=EInt 
	 *         customer=[Customer|EString] 
	 *         rider=[Rider|EString]
	 *     )
	 */
	protected void sequence_Route(ISerializationContext context, Route semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.IDENTIFIABLE__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.IDENTIFIABLE__ID));
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.ROUTE__PRICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.ROUTE__PRICE));
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.ROUTE__DATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.ROUTE__DATE));
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.ROUTE__START_ADDRESS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.ROUTE__START_ADDRESS));
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.ROUTE__END_ADDRESS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.ROUTE__END_ADDRESS));
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.ROUTE__FEEDBACK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.ROUTE__FEEDBACK));
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.ROUTE__STATUS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.ROUTE__STATUS));
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.ROUTE__SEATS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.ROUTE__SEATS));
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.ROUTE__CUSTOMER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.ROUTE__CUSTOMER));
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.ROUTE__RIDER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.ROUTE__RIDER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRouteAccess().getIdEStringParserRuleCall_1_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getRouteAccess().getPriceEDoubleParserRuleCall_4_0(), semanticObject.getPrice());
		feeder.accept(grammarAccess.getRouteAccess().getDateEStringParserRuleCall_6_0(), semanticObject.getDate());
		feeder.accept(grammarAccess.getRouteAccess().getStartAddressEStringParserRuleCall_8_0(), semanticObject.getStartAddress());
		feeder.accept(grammarAccess.getRouteAccess().getEndAddressEStringParserRuleCall_10_0(), semanticObject.getEndAddress());
		feeder.accept(grammarAccess.getRouteAccess().getFeedbackEIntParserRuleCall_12_0(), semanticObject.getFeedback());
		feeder.accept(grammarAccess.getRouteAccess().getStatusRouteStatusEnumRuleCall_14_0(), semanticObject.getStatus());
		feeder.accept(grammarAccess.getRouteAccess().getSeatsEIntParserRuleCall_16_0(), semanticObject.getSeats());
		feeder.accept(grammarAccess.getRouteAccess().getCustomerCustomerEStringParserRuleCall_18_0_1(), semanticObject.eGet(UberPackage.Literals.ROUTE__CUSTOMER, false));
		feeder.accept(grammarAccess.getRouteAccess().getRiderRiderEStringParserRuleCall_20_0_1(), semanticObject.eGet(UberPackage.Literals.ROUTE__RIDER, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Supervisor returns Supervisor
	 *
	 * Constraint:
	 *     (id=EString name=EString surname=EString email=EString role=RoleSupervisor)
	 */
	protected void sequence_Supervisor(ISerializationContext context, Supervisor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.IDENTIFIABLE__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.IDENTIFIABLE__ID));
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.USER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.USER__NAME));
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.USER__SURNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.USER__SURNAME));
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.USER__EMAIL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.USER__EMAIL));
			if (transientValues.isValueTransient(semanticObject, UberPackage.Literals.SUPERVISOR__ROLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UberPackage.Literals.SUPERVISOR__ROLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSupervisorAccess().getIdEStringParserRuleCall_1_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getSupervisorAccess().getNameEStringParserRuleCall_4_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSupervisorAccess().getSurnameEStringParserRuleCall_6_0(), semanticObject.getSurname());
		feeder.accept(grammarAccess.getSupervisorAccess().getEmailEStringParserRuleCall_8_0(), semanticObject.getEmail());
		feeder.accept(grammarAccess.getSupervisorAccess().getRoleRoleSupervisorEnumRuleCall_10_0(), semanticObject.getRole());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Uber returns Uber
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         manager=EString? 
	 *         address=EString? 
	 *         (customers+=Customer customers+=Customer*)? 
	 *         (riders+=Rider riders+=Rider*)? 
	 *         (routes+=Route routes+=Route*)? 
	 *         (supervisors+=Supervisor supervisors+=Supervisor*)?
	 *     )
	 */
	protected void sequence_Uber(ISerializationContext context, Uber semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
