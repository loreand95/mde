// automatically generated by Xtext
grammar it.disim.mde.loreand.xtext.UberDsl with org.eclipse.xtext.common.Terminals

import "http://www.loreand.it/mde" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Uber returns Uber:
	{Uber}
	'Uber'
	name=EString
	'{'
		('manager' manager=EString)?
		('address' address=EString)?
		('customers' '{' customers+=Customer ( "," customers+=Customer)* '}' )?
		('riders' '{' riders+=Rider ( "," riders+=Rider)* '}' )?
		('routes' '{' routes+=Route ( "," routes+=Route)* '}' )?
		('supervisors' '{' supervisors+=Supervisor ( "," supervisors+=Supervisor)* '}' )?
	'}';








EString returns ecore::EString:
	STRING | ID;

Customer returns Customer:
	'Customer'
	id=EString
	'{'
		'name' name=EString
		'surname' surname=EString
		'email' email=EString
		('subscriptionDate' subscriptionDate=EString)?
		'expirationDate' expirationDate=EString
		'status' status=CustomerStatus
		('routes' '(' routes+=[Route|EString] ( "," routes+=[Route|EString])* ')' )?
		('cardID' cardID=CardID)?
	'}';

Rider returns Rider:
	'Rider'
	id=EString
	'{'
		'name' name=EString
		'surname' surname=EString
		'email' email=EString
		'status' status=RiderStatus
		('routes' '(' routes+=[Route|EString] ( "," routes+=[Route|EString])* ')' )?
		'location' location=Geolocation
		'car' car=Car
	'}';

Route returns Route:
	'Route'
	id=EString
	'{'
		'price' price=EDouble
		'date' date=EString
		'startAddress' startAddress=EString
		'endAddress' endAddress=EString
		'feedback' feedback=EInt
		'status' status=RouteStatus
		'seats' seats=EInt
		'customer' customer=[Customer|EString]
		'rider' rider=[Rider|EString]
	'}';

Supervisor returns Supervisor:
	'Supervisor'
	id=EString
	'{'
		'name' name=EString
		'surname' surname=EString
		'email' email=EString
		'role' role=RoleSupervisor
	'}';

enum CustomerStatus returns CustomerStatus:
				PENDING = 'PENDING' | ACTIVED = 'ACTIVED' | BANNED = 'BANNED';

CardID returns CardID:
	'CardID'
	id=EString
	'{'
		'path' path=EString
		'releaseDate' releaseDate=EString
		'institution' institution=EString
		('approved' approved=[Supervisor|EString])?
	'}';

enum RiderStatus returns RiderStatus:
				AVAILABLE = 'AVAILABLE' | BUSY = 'BUSY' | UNAVAILABLE = 'UNAVAILABLE';

Geolocation returns Geolocation:
	'Geolocation'
	'{'
		'lat' lat=EDouble
		'lng' lng=EDouble
	'}';

Car returns Car:
	'Car'
	'{'
		'licencePlate' licencePlate=EString
		'model' model=EString
		'color' color=EString
	'}';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EInt returns ecore::EInt:
	'-'? INT;

enum RouteStatus returns RouteStatus:
				DONE = 'DONE' | DOING = 'DOING' | PENDING = 'PENDING';

enum RoleSupervisor returns RoleSupervisor:
				MANAGER = 'MANAGER' | ACCOUNTANT = 'ACCOUNTANT' | STORE = 'STORE';
