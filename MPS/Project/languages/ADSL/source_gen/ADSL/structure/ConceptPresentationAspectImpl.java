package ADSL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_CardId;
  private ConceptPresentation props_Customer;
  private ConceptPresentation props_Geolocation;
  private ConceptPresentation props_Rider;
  private ConceptPresentation props_Route;
  private ConceptPresentation props_System;
  private ConceptPresentation props_User;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.CardId:
        if (props_CardId == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CardId");
          props_CardId = cpb.create();
        }
        return props_CardId;
      case LanguageConceptSwitch.Customer:
        if (props_Customer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Customer");
          props_Customer = cpb.create();
        }
        return props_Customer;
      case LanguageConceptSwitch.Geolocation:
        if (props_Geolocation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Geolocation");
          props_Geolocation = cpb.create();
        }
        return props_Geolocation;
      case LanguageConceptSwitch.Rider:
        if (props_Rider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Rider");
          props_Rider = cpb.create();
        }
        return props_Rider;
      case LanguageConceptSwitch.Route:
        if (props_Route == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Route");
          props_Route = cpb.create();
        }
        return props_Route;
      case LanguageConceptSwitch.System:
        if (props_System == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Root System");
          cpb.presentationByName();
          props_System = cpb.create();
        }
        return props_System;
      case LanguageConceptSwitch.User:
        if (props_User == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("User ");
          props_User = cpb.create();
        }
        return props_User;
    }
    return null;
  }
}
